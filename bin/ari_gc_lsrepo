#! /usr/bin/env python

import argparse
import os
import sys

from github_classroom_util import GithubClassroom

def eprint(*args, **kwargs):
    print(*args, file = sys.stderr, **kwargs)

def get_remaining(gc):
    rate_limit = gc.get_rate_limit()
    return rate_limit["rate"]["remaining"]

def get_assignment_ids(gc, classroom_name, assignment_name=None):

    classroom_list = gc.list_classrooms()

    # Get the classroom with the specified name.
    index = next((i for i, v in enumerate(classroom_list) if v["name"] ==
      classroom_name), None)
    if index == None:
        # No classroom was found with the specified name.
        return None
    classroom = classroom_list[index]
    assert(classroom)

    assignment_list = gc.list_assignments(classroom["id"])
    if assignment_name is not None:
        index = next((i for i, v in enumerate(assignment_list) if
          v["title"] == assignment_name), None)
        if index == None:
            return None
        ids = [assignment_list[index]["id"]]
    else:
        ids = [assignment["id"] for assignment in assignment_list]
    return ids

def get_github_token():
    token = None
    if token is None and cl_args.gh_token_env is not None:
        token = os.environ.get(cl_args.gh_token_env)
    if token is None:
        token = os.environ.get("ARI_GC_TOKEN")
    if token is None:
        token = os.environ.get("ARI_GH_TOKEN")
    if token is None:
        token = os.environ.get("GH_TOKEN")
    return token

def parse_command_line():

    parser = argparse.ArgumentParser(
      description="GitHub Classroom Repository Lister")

    parser.add_argument(
      "--gh-token-env",
      dest="gh_token_env",
      help="Specify GitHub token environment variable."
    )

    parser.add_argument(
      "-o", "--classroom",
      dest="classroom_name",
      required=True,
      help="Specify classroom name."
    )

    parser.add_argument(
      "-a", "--assignment",
      dest="assignment_name",
      default=None,
      help="Specify assignment name."
    )

    parser.add_argument(
      "-g", "--git-proto",
      dest="git_proto",
      default="https",
      help="Specify Git protocol."
    )

    parser.add_argument(
      "-u", "--url",
      default=False,
      action=argparse.BooleanOptionalAction,
      dest="git_url",
      help="Enable/disable Git URL."
    )

    parser.add_argument(
      "--show-rate-limit",
      default=False,
      action=argparse.BooleanOptionalAction,
      dest="show_rate_limit",
      help="Enable/disable showing of rate limit."
    )

    return parser.parse_args()

def main():

    global cl_args
    cl_args = parse_command_line()

    github_token = get_github_token()
    if github_token is None:
        eprint("warning: GitHub token has not been specified")

    gc = GithubClassroom(token = github_token)

    if cl_args.show_rate_limit:
        start_rate_limit = get_remaining(gc)
        eprint(f"rate limit remaining {start_rate_limit}")

    assignment_ids = get_assignment_ids(gc, cl_args.classroom_name,
      cl_args.assignment_name)
    for assignment_id in assignment_ids:
        submissions = gc.list_accepted_assignments(assignment_id)
        submissions = sorted(submissions, key=lambda x: x["repository"]["name"].lower())
        for submission_index, submission in enumerate(submissions):
            repo = submission["repository"]
            repo_name = repo["name"]
            full_repo_name = repo["full_name"]
            if cl_args.git_url:
                if cl_args.git_proto == "https":
                    gh_user = "uvic-frodo-admin"
                    user_spec = f"{gh_user}@"
                    prefix = f"https://{user_spec}github.com/"
                else:
                    prefix = f"ssh://git@github.com/"
                print(f"{prefix}{full_repo_name}.git")
            else:
                print(repo_name)

    if cl_args.show_rate_limit:
        end_rate_limit = get_remaining(gc)
        eprint(f"rate limit remaining {end_rate_limit}")
        eprint(f"rate limit used {start_rate_limit - end_rate_limit}")

if __name__ == "__main__":
    sys.exit(main())
