#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2018-2025 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

panic()
{
	echo "ERROR: $@"
	exit 1
}

usage()
{
	if [ $# -gt 0 ]; then
		echo "$@" 1>&2
	fi
	local example_version=v0.11.0
	cat <<- EOF
	Usage
	=====

	$0 [options] -v \$version -d \$install_dir

	Options
	=======

	-d \$install_dir
	    Set the installation directory to \$install_dir.
	-v \$version
	    Set the version to install to \$version.

	Examples
	========

	$0 -v $example_version -d /opt/bwrap
	$0 -v master -d /opt/bwrap
	EOF
	exit 2
}

cmd_dir=$(dirname "$0") || \
  panic "cannot get command directory"
cmd_dir=$(realpath "$cmd_dir") || \
  panic "cannot get realpath of command directory"
ari_mktemp="$cmd_dir/ari_mktemp"

user=$(whoami) || panic "cannot get user name"
host=$(hostname) || panic "cannot get host name"
cur_dir=$(pwd) || panic "cannot get current directory"

repo_url="https://github.com/projectatomic/bubblewrap.git"

version=master
install_dir=

tmp_dir_template="${ARI_TMPDIR:-/tmp}/ari_install_bwrap-$user-$host-$$-XXXXXXXX"

while getopts d:v: opt; do
	case "$opt" in
	d)
		install_dir="$OPTARG";;
	v)
		version="$OPTARG";;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$install_dir" ]; then
	usage "no installation directory specified"
fi
if [ -z "$version" ]; then
	usage "no version specified"
fi

abs_install_dir=$(readlink -f "$install_dir") || \
  panic "cannot get absolute pathname"

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

make_opts=()

tmp_dir=$("$ari_mktemp" -d "$tmp_dir_template") || \
  panic "cannot make temporary directory"

top_dir="$tmp_dir/bwrap-$version"
src_dir="$top_dir/src"
build_dir="$top_dir/build"

for dir in "$top_dir" "$src_dir" "$build_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir -p "$dir" || panic "cannot make directory $dir"
	fi
done

options=()
options+=(--without-bash-completion-dir)
options+=(--disable-man)

git clone "$repo_url" "$src_dir" || \
  panic "cannot clone repository"

(cd "$src_dir" && git checkout "$version" --) || \
  panic "cannot checkout"

if [ 1 -ne 0 ]; then

	# The officially sanctioned build method using Meson.

	meson setup --prefix="$install_dir" "$build_dir" "$src_dir" || \
	  panic "meson setup failed"
	#meson "$build_dir" || panic
	meson compile -C "$build_dir" || \
	  panic "meson compile failed"
	meson test -C "$build_dir" || \
	  panic "meson test failed"
	meson install -C "$build_dir" || \
	  panic "meson install failed"

else

	# The deprecated build method based on autotools.

	(cd "$build_dir" && NOCONFIGURE=true ../src/autogen.sh) || \
	  panic "autoconf failed"

	(cd "$build_dir" && 
	  ../src/configure --prefix="$abs_install_dir" "${options[@]}") || \
	  panic "configure failed"

	(cd "$build_dir" && make "${make_opts[@]}") || \
	  panic "make failed"

	(cd "$build_dir" && make install) || \
	  panic "make install failed"

fi

rm -rf "$tmp_dir" || \
  panic "cannot remove temporary directory $tmp_dir"

exit 0
